package com.cos.book.service;

import java.util.List;
import java.util.function.Supplier;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cos.book.domain.Book;
import com.cos.book.domain.BookRepository;

import lombok.RequiredArgsConstructor;

//기능을 정의할 수 있고, 트랜잭션을 관리할 수 있음

@RequiredArgsConstructor
@Service
public class BookService {
	
	private final BookRepository bookRepository;
	
	//실패하면 롤백으로 관리해줌
	@Transactional //서비스 함수가 종료될 때 commit할지 rollback할지 트랜잭션 관리하겠다
	public Book 저장하기(Book book) {
		return bookRepository.save(book); //엔티티 리턴
	}
	
	@Transactional(readOnly = true) 
	//JPA 변경감지라는 내부 기능 활성화 X(쓸데없는연산 줄고), update시의 정랍성을 유지해줌. insert의 유령데이터현상(팬텀현상) 못막음
	public Book 한건가져오기(Long id) {
		//람다식으로 변경 : 타입을 몰라도 알아서 해줌!
		return bookRepository.findById(id)
				.orElseThrow(()->new IllegalArgumentException("id를 확인해주세요!!"));
	}
	
	@Transactional(readOnly = true) 
	public List<Book> 모두가져오기(){
		return bookRepository.findAll();
		
	}
	
	@Transactional(readOnly = true) 
	public List<Book> 검색가져오기(String search){
		List<Book> books = bookRepository.findByTitleContaining(search);
		return books;
		
	}
	
	@Transactional
	public Book 수정하기(Long id, Book book) {
		//더티체킹 update치기
		Book bookEntity = bookRepository.findById(id)
				.orElseThrow(()->new IllegalArgumentException("id를 확인해주세요!!")); //영속화 (book 오브젝트) -> 영속성 컨텍스트보관
		//스프링내부 메모리공간에 따로 들고있음
		bookEntity.setTitle(book.getTitle());
		bookEntity.setAuthor(book.getAuthor());
		return bookEntity;
	} //함수종료 -> 트랜잭션 종료 => 영속화 되어있는 데이터를 DB로 갱신(flush) => commit ===> 더티체킹
	
	@Transactional
	public String 삭제하기(Long id) {
		bookRepository.deleteById(id); //오류가 터지면 익셉션을 타니까 신경 x
		return "ok";
	}
}
